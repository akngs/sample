---
description: Development practices to follow
globs: src/**/*.rs
alwaysApply: false
---
General rules:

- Write canonical Rust code.
- Try best to remove duplications and reveal intention clearly.
- When performing refactoring, try best to keep the current behavior. If you change external behavior of the code, it is not a refactoring.
- Prefer pure functions and add tests to cover them.
- Keep functions small and focused
- Always run `rustfmt`, `clippy`, and `test` after changing the code.

Testing:

- Test both success and error cases
- Use meaningful test descriptions
- Keep test files close to implementation

Misc.

- Always keep documents and comments in sync with the code.

Commit message should follow this form:

```
Short (72 chars or less) summary starts with verb, e.g. "Add," "Fix," "Delete," and so on.

More detailed explanatory text. Wrap it to 72 characters. The blank
line separating the summary from the body is critical (unless you omit
the body entirely).

Write your commit message in the imperative: "Fix bug" and not "Fixed
bug" or "Fixes bug." This convention matches up with commit messages
generated by commands like git merge and git revert.

Further paragraphs come after blank lines.

- Bullet points are okay, too.
- Typically a hyphen or asterisk is used for the bullet, followed by a
  single space. Use a hanging indent.
```
